import random

class CAI:
    def __init__(self):
        self.difficulty_level = 0
        self.operation_type = 0
        self.correct_answers = 0
        self.total_questions = 0

    def start(self):
        print("Bienvenido a la Instrucción Asistida por Computadora (CAI)")
        self.difficulty_level = self.choose_difficulty_level()
        self.operation_type = self.choose_operation_type()
        self.generate_questions()

    def choose_difficulty_level(self):
        level = int(input("Selecciona el nivel de dificultad (1-3): "))
        return level

    def choose_operation_type(self):
        print("Selecciona el tipo de problema aritmético:")
        print("1. Suma")
        print("2. Resta")
        print("3. Multiplicación")
        print("4. División")
        print("5. Mezcla")
        operation = int(input("Selecciona el número correspondiente al tipo de problema: "))
        return operation

    def generate_questions(self):
        while self.total_questions < 10:
            num1 = self.generate_number()
            num2 = self.generate_number()
            operator = self.get_operator()

            question = f"¿Cuánto es {num1} {operator} {num2}? "
            answer = self.get_user_input(question)
            self.check_answer(num1, num2, operator, answer)

    def generate_number(self):
        max_limit = self.difficulty_level * 10 if self.difficulty_level < 4 else 100
        return random.randint(0, max_limit)

    def get_operator(self):
        if self.operation_type == 1:
            return "+"
        elif self.operation_type == 2:
            return "-"
        elif self.operation_type == 3:
            return "*"
        elif self.operation_type == 4:
            return "/"
        elif self.operation_type == 5:
            operators = ["+", "-", "*", "/"]
            return random.choice(operators)

    def get_user_input(self, question):
        answer = input(question)
        return answer

    def check_answer(self, num1, num2, operator, answer):
        expected
